openapi: 3.0.0
info:
  title: Digital Derby
  version: 0.0.0
components:
  schemas:
    gameLog:
      name: Game Log
      description: A recorded game
      type: object
      properties:
        horses:
          type: array
          items:
            $ref: '#/components/schemas/horseProfile'
        rankings:
          type: array
          items:
            type: number
          example:
            - 0
            - 2
            - 1
            - 3
    bet:
      name: Bet
      description: A bet placed on a certain game and a certain horse
      type: object
      properties:
        gameId:
          $ref: '#/components/schemas/gameLog'
        horseId:
          $ref: '#/components/schemas/horseProfile'
        betValue:
          type: integer
        returns:
          type: integer
        wentBankrupt:
          type: bool
    userProfile:
      name: User Profile
      description: A user, their current wallet balance, and their past betting history
      type: object
      properties:
        username:
          type: string
        profile:
          type: object
          properties:
            wallet:
              type: integer
            bankruptcies:
              type: integer
            betLog:
              type: array
              items:
                $ref: '#/components/schemas/bet'
            favoriteHorses:
              type: array
              items:
                $ref: '#/components/schemas/horseProfile'
    horseProfile:
      name: HorseProfile
      description: A horse and their stats
      type: object
      properties:
        name:
          type: string
        icons:
          type: array
          items:
            type: string
        color:
          type: string
        stats:
          type: object
      example:
        name: Cool Horse
        icons:
          - horse
          - sparkle
          - fire
        color: Gold
        stats:
          topSpeed: 10
          stamina: 10
          acceleration: 10
  parameters:
    username:
      name: Username
      in: path
      description: Username
      type: string
    horseId:
      name: Horse ID
      in: path
      description: Slug to identify a certain horse
      type: string
    adminToken:
      name: Admin Token
      description: JWT obtained when a user logs in as the user 'admin'.
      in: header
      required: true
      schema:
        type: string 
        example:
          Bearer <adminToken>
    userToken:
      name: User Token
      description: JWT to authorize a client as a specific user.
      in: header
      required: true
      schema:
        type: string 
        example:
          Bearer <adminToken>
tags:
  - name: Admin Tools
    description: Tools for managing the operation of the server
  - name: Authentication
    description: Endpoints for signing up and logging in
  - name: Horse Data
    description: Endpoints for accessing historical horse data
  - name: Race Data
    description: Endpoints for accessing historical race data
  - name: User Data
    description: Endpoints for accessing user information
paths:
  /admin/serverStatus:
    get:
      summary: Get current server status
      description: Returns whether the game server is currently closed (not accepting connections), inactive (accepting connections, but not running the simulation) or active (accepting connections and running the simulation).
      tags: [Admin Tools]
      responses:
        "200":
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                example:
                  serverStatus: "closed | inactive | active"
        "500":
          description: 'Internal error'
  /admin/newHorses:
    post:
      summary: Generate a new population of horses
      description: Deletes all the horses in the database (as well as any bets placed on those horses and any games involving those horses) and generates a new population of horses.
      tags: [Admin Tools]
      parameters:
        - $ref: '#/components/parameters/adminToken'
      responses:
        "200":
          description: 'OK'
        "400":
          description: 'Bad request: malformed or expired JWT, no JWT in the authorization headers, etc.'
        "401":
          description: 'Unauthorized: not logged in as the admin user'
        "500":
          description: 'Internal error'
  /admin/openServer:
    post:
      summary: Open the server and start the simulation
      tags: [Admin Tools]
      description: Initializes the Socket.IO server, begins the simulation, and starts accepting connections.
      parameters:
        - $ref: '#/components/parameters/adminToken'
      responses:
        "200":
          description: 'OK'
        "400":
          description: 'Bad request: malformed or expired JWT, no JWT in the authorization headers, etc.'
        "401":
          description: 'Unauthorized: not logged in as the admin user'
        "500":
          description: 'Internal error'
  /admin/closeServer:
    post:
      summary: Closes the Socket.IO server
      description: Stops the simulation, disconnects all clients, and stops accepting connections.
      tags: [Admin Tools]
      parameters:
        - $ref: '#/components/parameters/adminToken'
      responses:
        "200":
          description: 'OK'
        "400":
          description: 'Bad request: malformed or expired JWT, no JWT in the authorization headers, etc.'
        "401":
          description: 'Unauthorized: not logged in as the admin user'
        "500":
          description: 'Internal error'
  /auth/login:
    post:
      summary: Log in as a user
      description: Log in, retrieving a JWT you can use to connect to the server or use any of the protected routes.
      tags: [Authentication]
      responses:
        "200":
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Successfully logged in as user (username)'
                  token: '< login JWT >'
        "400":
          description: 'Password does not match'
        "404":
          description: 'User does not exist'
        "500":
          description: 'Internal error'
  /auth/signup:
    post:
      summary: Sign up for a new account
      description: Create a new account providing a username and password, and retrieve a JWT you can use to connect to the server.
      tags: [Authentication]
      responses:
        "200":
          description: 'Created'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Successfully created user (username)'
                  token: '< login JWT >'
        "400":
          description: 'Password does not match'
        "404":
          description: 'User does not exist'
        "500":
          description: 'Internal error'
  /auth/deleteAccount:
    delete:
      summary: Delete the user's account
      description: Deletes the currently logged-in user's account.
      tags: [Authentication]
      responses:
        "200":
          description: 'OK'
        "400":
          description: 'Bad request: malformed or expired JWT, no JWT in the authorization headers, etc.'
        "401":
          description: 'Unauthorized: not logged in as a user'
        "500":
          description: 'Internal error'
  /horses:
    get:
      summary: Get all horse data
      description: Retrieves all the horses from the database.
      tags: [Horse Data]
      responses:
        "200":
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/horseProfile'
        "500":
          description: 'Internal error'
  /horses/{id}:
    get:
      summary: Get a specific horse by ID
      description: Get a specific horse by their horse ID.
      tags: [Horse Data]
      parameters:
        - $ref: '#/components/parameters/horseId'
      responses:
        "200":
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/horseProfile'
        "404":
          description: 'Not found'
        "500":
          description: 'Internal error'
  /horses/{id}/lastGames:
    get:
      summary: Get the specific horse's last games played
      description: Get all of the horse's previous games, most recent first.
      tags: [Horse Data]
      parameters:
        - $ref: '#/components/parameters/horseId'
      responses:
        "200":
          description: 'OK'
        "404":
          description: 'Not found'
  /races:
    get:
      summary: Get all historical race data
      description: Get all the most recent races, most recent ones first.
      tags: [Race Data]
      responses:
        "200":
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/gameLog'
  /races/lastGame:
    get:
      summary: Get the game log for the most recent game
      description: Get the most recently completed race.
      tags: [Race Data]
      responses:
        "200":
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/gameLog'
  /races/{id}:
    get:
      summary: Get a specific game by id
      description: Get a specific race by it's ID.
      tags: [Race Data]
      responses:
        "200":
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/gameLog'
  /races/{id}/horses:
    get:
      summary: Get all the details for all the horses in a specific race
      description: Get all the horses who participated in a specific race.
      tags: [Race Data]
      responses:
        "200":
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/horseProfile'
  /users:
    get:
      summary: Get all registered users' username
      description: Get the usernames of all registered users.
      tags: [User Data]
      responses:
        "200":
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example:
                  - foo
                  - bar
                  - admin
                  - baz
  /users/{username}:
    get:
      summary: Get a specific user profile by username
      description: Get a specific user's profile by their username.
      tags: [User Data]
      parameters:
        - $ref: '#/components/parameters/username'
      responses:
        "200":
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userProfile'
        "404":
          description: 'Not found'
    delete:
      summary: Delete a user's account
      description: As an admin, delete a user's account
      tags: [User Data]
      parameters:
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/adminToken'
      responses:
        "200":
          description: 'OK'
        "400":
          description: 'Bad request: malformed or expired JWT, no JWT in the authorization headers, etc.'
        "401":
          description: 'Unauthorized: not logged in as the admin user'
        "500":
          description: 'Internal error'
  /users/{username}/favoriteHorses:
    get:
      summary: Get a user's favorite horses
      description: Get the list of the user's favorite horses
      tags: [User Data]
      parameters:
        - $ref: '#/components/parameters/username'
      responses:
        "200":
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/horseProfile'
        "401":
          description: 'Unauthorized'
        "404":
          description: 'Not found'
        "500":
          description: 'Internal error'
    post:
      summary: Add a horse to the user's favorites
      description: Get the list of the user's favorite horses
      tags: [User Data]
      parameters:
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/userToken'
      responses:
        "201":
          description: 'Created'
        "401":
          description: 'Unauthorized'
        "404":
          description: 'Not found'
        "500":
          description: 'Internal error'
  /users/{username}/favoriteHorses/{horseId}:
    delete:
      tags: [User Data]
      parameters:
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/userToken'
      responses:
        "200":
          description: 'OK'
        "401":
          description: 'Unauthorized'
        "404":
          description: 'Not found'
        "500":
          description: 'Internal error'
